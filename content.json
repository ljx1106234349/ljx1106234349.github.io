{"meta":{"title":"刘军","subtitle":"笨鸟先飞","description":null,"author":"刘军","url":"https://ljx1106234349.github.io","root":"/"},"pages":[{"title":"","date":"2019-08-01T02:19:32.776Z","updated":"2019-08-01T02:19:32.776Z","comments":true,"path":"about/index.html","permalink":"https://ljx1106234349.github.io/about/index.html","excerpt":"","text":"关于我从事 WEB 开发，主要开发语言 html5，熟悉使用 h5、css js等主流框架；对 网页 情有独钟；有一定的代码洁癖。 对服务端、前端、数据分析等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物。 关于工作城市：上海 关于学习正在往终身学习者前进…近期学习方向：前端开发 关于座右铭 The Harder You Work, The Luckier You Will Be. (越努力，越幸运) 关于爱好热爱运动，尤其喜爱羽毛球、阅读、电影、旅行、钓鱼 联系我 Home: LiuJun.com Blog: https://liujunxiang.vip Email: 1106234349@qq.com GitHub: ljx1106234349 WeiBo: yz56801314 QQ: https://user.qzone.qq.com/1106234349"}],"posts":[{"title":"vue-watch","slug":"vue-watch","date":"2020-08-26T06:39:06.000Z","updated":"2020-08-26T06:49:17.875Z","comments":true,"path":"2020/08/26/vue-watch/","link":"","permalink":"https://ljx1106234349.github.io/2020/08/26/vue-watch/","excerpt":"","text":"我们先理解下watch的使用首先确认 watch是一个对象，一定要当成对象来用。 对象就有键，有值。 键：就是你要监控的那个家伙，比如说$route，这个就是要监控路由的变化。或者是data中的某个变量。 值可以是函数：就是当你监控的家伙变化时，需要执行的函数，这个函数有两个形参，第一个是当前值，第二个是变化后的值。 值也可以是函数名：不过这个函数名要用单引号来包裹。 第三种情况厉害了。 值是包括选项的对象：选项包括有三个。 1.第一个handler：其值是一个回调函数。即监听到变化时应该执行的函数。 2.第二个是deep：其值是true或false；确认是否深入监听。（一般监听时是不能监听到对象属性值的变化的，数组的值变化可以听到。） 3.第三个是immediate：其值是true或false；确认是否以当前的初始值执行handler的函数。","categories":[],"tags":[{"name":"-watch","slug":"watch","permalink":"https://ljx1106234349.github.io/tags/watch/"}]},{"title":"Element","slug":"Element","date":"2020-07-03T02:43:44.000Z","updated":"2020-07-03T02:51:51.780Z","comments":true,"path":"2020/07/03/Element/","link":"","permalink":"https://ljx1106234349.github.io/2020/07/03/Element/","excerpt":"","text":"","categories":[],"tags":[{"name":"-表格 -进度条","slug":"表格-进度条","permalink":"https://ljx1106234349.github.io/tags/表格-进度条/"}]},{"title":"axios","slug":"axios","date":"2019-11-08T07:22:40.000Z","updated":"2019-11-08T07:46:47.963Z","comments":true,"path":"2019/11/08/axios/","link":"","permalink":"https://ljx1106234349.github.io/2019/11/08/axios/","excerpt":"","text":"axios是什么axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端 特点： 支持浏览器和nodejs 支持Promise 能拦截请求和响应 能转换请求和响应数据 能取消请求 能自动转换JSON数据 浏览器端支持防止CSRF(跨站请求伪造) 使用：npm install axios 装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中","categories":[],"tags":[{"name":"-axios","slug":"axios","permalink":"https://ljx1106234349.github.io/tags/axios/"}]},{"title":"Ajax","slug":"Ajax","date":"2019-11-08T06:45:25.000Z","updated":"2019-11-08T08:31:02.843Z","comments":true,"path":"2019/11/08/Ajax/","link":"","permalink":"https://ljx1106234349.github.io/2019/11/08/Ajax/","excerpt":"","text":"什么是ajax? 如何使用ajax​ ajax（异步javascript xml）能够刷新局部网页数据而不是重新加载整个网页。 ​ 使用方法 创建xmlhttprequest对象，也就是创建一个异步调用对象 创建一个新的HTTP请求，并指定它的请求方法、url及验证信息 设置返回状态 设置请求头 xhr.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”); //post必须设置 发送请求 使用xmlhttprequest对象的responseText或responseXML属性获得服务器的响应 onreadystatechange函数,当发送请求到服务器，我们想要服务器响应执行一些功能就需要使用onreadystatechange函数，每次xmlhttprequest对象的readyState发生改变都会触发onreadystatechange函数 1234567891011/* readyState 0: 请求未初始化 1: 服务器连接已建立 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪 status 200 OK 404 Not Found */","categories":[],"tags":[{"name":"-Ajax","slug":"Ajax","permalink":"https://ljx1106234349.github.io/tags/Ajax/"}]},{"title":"vue","slug":"vue","date":"2019-11-08T03:01:07.000Z","updated":"2019-11-08T08:30:36.436Z","comments":true,"path":"2019/11/08/vue/","link":"","permalink":"https://ljx1106234349.github.io/2019/11/08/vue/","excerpt":"","text":"vue是什么？有哪些特点？如何理解MVVM模式Vue.js是一套构建用户界面的渐进式框架，Vue 采用自下向上增量开发的设计，其核心库只关注视图层，易于上手，同时vue完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用 特点1.数据绑定：vue会根据对应的元素，进行设置元素数据，通过输入框，以及get获取数据等多种方式进行数据的实时绑定，进行网页及应用的数据渲染 。 2.组件式开发：通过vue的模块封装，它可以将一个web开发中设计的各种模块进行拆分，变成单独的组件，然后通过数据绑定，调用对应模版组件，同时传入参数，即可完成对整个项目的开发 model：数据模型，view：视图，viewModel连接两个，使数据和视图结合 vue双向数据绑定的原理是什么，如何实现？vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，再数据变动时发布消息给订阅者，触发相应的监听回调。 具体步骤： 需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter；这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化 compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图 Watcher订阅者时Observer和Compile之间的通信桥梁，主要做的事情是： 在自身实例化时往属性订阅器（dep）里面添加自己 自身必须有一个update()方法 待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。 MVVM作为数据绑定的入口，整合Observer,Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，打到数据变化–&gt;视图更新；视图监护变化（input）–&gt;数据model变更的双向绑定效果 vue组件，组件的封装过程","categories":[],"tags":[{"name":"-介绍 -双向数据绑定 -组件注册","slug":"介绍-双向数据绑定-组件注册","permalink":"https://ljx1106234349.github.io/tags/介绍-双向数据绑定-组件注册/"}]},{"title":"linux用户管理/目录结构/文件系统","slug":"linux","date":"2019-08-12T06:12:39.000Z","updated":"2019-08-16T01:35:46.773Z","comments":true,"path":"2019/08/12/linux/","link":"","permalink":"https://ljx1106234349.github.io/2019/08/12/linux/","excerpt":"","text":"用户管理（超级管理员身份） root / 默认密码（重置密码） 使用root登录到ubuntu系统中 1）创建新用户 ​ $ adduser 用户名称 ​ 过程： ​ 新建组，组名与用户名保持一致 ​ /etc/group 保存了组信息 ​ 新建用户，并且将用户放到刚刚新建的组中 ​ /etc/passwd 保存了用户信息​ /etc/shadow 保存了用户的密码信息 ​ 创建了一个家目录 /home/xxx ​ /etc/skel拷贝到用户家目录 2）删除用户 ​ $ userdel -r zhangsan​ 删除用户信息，并且将用户家目录也给删除 3）切换用户 ​ $ su - 4）修改用户 ​ $ userdel -r zhangsan ​ 删除用户信息，并且将用户家目录也删除 5） 修改组信息 ​ $ groupmod ​ $ groupmod -n group14 boss Linux目录结构 / ​ /home 普通用户家目录 ​ zhangsan ​ lisi ​ 默认情况下，普通用户只能在家目录中进行更新操作（增加、删除、修改） ​ /root 超级管理员的家目录 ​ /etc 系统配置文件目录 ​ /opt 第三方文件解压安装目录 ​ /uer 文件的默认目录 ​ /var ​ /sys 系统目录 ​ /dev ​ … 文件系统 1）新建目录 ​ $ mkdir linux group14 ​ $ mkdir -p day01/a/b/c 2）新建文件/修改最近访问时间 ​ $ touch 文件名 ​ 如果指定文件名不存在，创建该文件。如果存在，修改最近访问时间为当前时间 3）拷贝文件或者目录 ​ $ cp a.txt a.txt.bak ​ $ cp -r dir1 dir2 4）链接 ​ 创建硬链接（防止误删除，多个指针指向同一个inode） ​ $ In a.txt a.txt.h ​ 创建软连接（快捷方式） ​ $ In -s a.txt a.txt.h 5）移动 ​ $ mv a.* dir1 ​ $ mv a b 6）删除 ​ $ rm a.txt ​ $ rm -r dir2 ​ $ rmdir 只能删除空目录 7）重定向 123456&gt;&gt;&gt; $ date &gt; a.txt$ date &gt;&gt; a.txt$ more /etc/passwd &gt; b.txt$ ls -l /etc &gt; c.txt 8）压缩与解压缩 123456789101112131415161718192021222324252627282930313233343536373839401. 压缩 .gz gzip 压缩 .bz2 bzip2 压缩 .zip zip 打包压缩 $ gzip a.txt =&gt; a.txt.gz $ bzip2 a.txt =&gt; a.txt.bz2 $ zip all.zip *.txt =&gt; all.zip (a.txt b.txt c.txt)2. 解压缩 $ gunzip a.txt.gz =&gt; a.txt $ bunzip2 a.txt.bz3 =&gt; a.txt $ unzip all.zip =&gt; a.txt b.txt c.txt $ unzip all.zip -d dir2 =&gt; dir2/a.txt b.txt c.txt3. 归档 tar -c 创建归档文件 -x 拆档 -v 打印细节 -f 指定归档/拆档文件 -j bzip2格式 xxx.tar.bz2 -z gzip格式 xxx.tar.gz $ tar cvf all.tar *.txt $ tar cvzf all.tar.gz *.txt (gzip) $ tar cvjf all.tar.bz2 *.txt (bzip2) 4. 拆档 $ tar xvf all.tar.gz 其他命令","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://ljx1106234349.github.io/tags/笔记/"}]},{"title":"SVN/CSS动画/变形/媒体查询","slug":"SVN","date":"2019-08-07T02:43:27.000Z","updated":"2019-08-09T08:44:24.336Z","comments":true,"path":"2019/08/07/SVN/","link":"","permalink":"https://ljx1106234349.github.io/2019/08/07/SVN/","excerpt":"","text":"8.svn应用代码版本控制，团队协作，代码备份 1) 搭建 svn 服务器 2) 安装svn客户端 tortoisesvn 3) 通过tortoisesvn检出团队所有项目 check out，获取到一个本地的svn仓库 4) 本地操作 ​ 修改 ​ 添加 9.CSS动画 动画定义123456789101112131415161718192021@keyframes 动画名称&#123; from &#123; &#125; to&#123; &#125;&#125;=》@keyframes 动画名称&#123; 10% &#123; &#125; 20%&#123; &#125; ... 100%&#123; &#125;&#125; 动画应用animation-name: //动画名称; **animation-duration:** //动画持续时间 5s; **animation-delay:** //动画的延迟，默认是0 1s **animation-direction:** //动画运动方向 reverse alternate **animation-fill-mode:** //动画结束后保留哪个样式 forwards //保留最后一帧的样式 backwards //保留第一帧的样式 **animation-iteration-count:** //动画执行的次数，默认是1 4 infinite //循环 **animation-timing-function:** //动画执行的时间曲线，默认是ease linear steps **animation-play-state: ;** //动画播放状态 running paused **animation:** 速写形式 **animation: 4s linear 0s infinite alternate move_eye**简述css3动画与过度效果动画： 动画的定义、动画的使用 过渡： CSS3中，我们为了添加某种效果可以从一种样式转变到另一个的时候，无需使用Flash动画或JavaScript。 简单的过渡效果使用transition，复杂的动画使用animation 第三方动画库 ​ 封装了css3的通用的动画样式，专业 ​ https://daneden.github.io/animate.css/ ​ 1. 引入动画库 ​ 2. 为元素添加class 10.过渡效果transition 1) transition和animation的区别 1. transition必须要触发，一般使用**:hover** 2. transition不需要设置关键帧 简单的过渡效果使用transition，复杂的动画使用animation 2) 用法 transition-property 指定过渡的属性 可以指定一个属性 width 可以指定多个属性 width,background 可以指定所有属性 all transition-duration 过渡持续的时间 可以指定秒，以及毫秒 s /ms transition-timing-function 过渡的时间曲线 transition-delay 过渡延迟 可以指定秒，以及毫秒 s /ms transition 速写 transition:property duration timing delay; 例如： transition: margin-right 2s ease-in-out .5s;11.变形(transform:)12345678910111213scale(2) 变大skewX(45deg) 倾斜skewY(45deg) 倾斜skew(45deg) 倾斜rotate(45deg) 旋转rotateX(45deg) 旋转rotateY(45deg) 旋转rotateZ(45deg) 旋转translateX(200px) translateY(300px) translate(200px,300px)...mdn 12.媒体查询1234567891011121314151617181920211.网页在不同终端下显示不同的布局？ 1) 多套网页(京东，淘宝，网易) pc index_pc.html mobile index_mobile.html pad index_pad.html 2) 一套（） index_all.html 可以适应所有的屏幕 @media screen and (min-width: 768px) and (max-width: 1024px) &#123;&#125; @media screen and (min-width: 1024px) &#123;&#125;2. 响应式布局框架(bootstrap) 50个 布局（响应式） 1) 媒体查询 media 2) 布局（float , flex） 框架 Bootstrap 十二栅格系统 vue elementui 24栅格系统","categories":[],"tags":[]},{"title":"选择器优先级/布局（浮动/定位/伸缩盒）/滚动条","slug":"选择器优先级、布局、滚动条","date":"2019-08-02T05:19:49.000Z","updated":"2019-08-09T07:38:18.437Z","comments":true,"path":"2019/08/02/选择器优先级、布局、滚动条/","link":"","permalink":"https://ljx1106234349.github.io/2019/08/02/选择器优先级、布局、滚动条/","excerpt":"","text":"6.选择器优先级概念：​ 浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。 这句话也是很抽象，暂且先不管它了。但是我们可以先看一个例子： HTML 123&lt;div id=\"content\" class=\"content\"&gt;我是什么颜色&lt;/div&gt; CSS 123456#content &#123; color: #f00;&#125;.content &#123; color: #0f0;&#125; 那最后文字是什么颜色呢？答案很简单：红色。这就涉及到了优先级问题，同一块内容，我们同时用了 ID选择器 和 类选择器,因为 ID选择器 优先级大于 类选择器 , 所以最终显示为红色。 优先级的计算规则CSS选择器优先级1内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 选择器的优先级是什么？按权重列出选择器的先后顺序选择器优先级： 1）是否具有!important声明 2）选择器权重 1000 定义在标签style属性中 100 id选择器 10 类选择器，伪类选择器，属性选择器 1 元素选择器,伪元素选择器 3）选择器权重相同时，后者覆盖前者（就近原则，哪一个样式离标签近，哪一个就生效） 顺序： !important &gt; id选择器 &gt; 类选择器=伪类选择器=属性选择器 &gt; 元素选择器=伪元素选择器 7.布局【*】 使用块元素搭建页面框架 块元素独占一行空间 布局的本质就是让块元素在一行中显示 7.1浮动布局 ​ float:left/right ​ 脱离文档流： 宽度高度默认由内容决定 原先所在位置就会被其他块元素抢占 浮动元素在一行中依次排列，当一行无法容纳的时候会自动换行 应用： 全部浮动（2+ 列）1234567891011121314151617ul::after &#123; display:block; content:&quot;&quot;; clear:both;&#125;ul&gt; li &#123; float:left; with:计算&#125;&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 左侧浮动，右侧不浮动（2列）123456789101112.content &gt; .left&#123; float:left; width:220px;&#125;.content &gt; .right &#123; margin-left:230px;&#125;&lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt; 清除浮动的方式，请从父子级和兄弟级两方面进行描述​ 父元素：​ 1）浮动元素的父元素设置高度​ 2）浮动的父级元素设置overflow:hidden;​ 3）浮动元素的父元素使用::after{clear:both;content:’’;display:block}​ 兄弟元素：​ 在使用浮动的最后一个兄弟元素后面，添加一个标签，该标签使用clear:both; 7.2 定位布局​ 作用：当一个元素悬挂在其他元素之上，优先考虑定位布局 ​ eg: 模态框、下拉菜单、二级菜单、固定宣传栏、网页聊天页面 ​ 用法： position:static/ relative / absolute / fixed / inherit/static 默认​ 静态布局，默认文档流中，非定位元素 relative 定位元素(相对定位)​ position: relative; //父级(最近的一个父级)相对定位的目的 ​ 1）没有脱离文档流 ​ 2）参照点为当前元素原本的位置 absolute 定位元素(绝对定位)​ position: absolute; ​ 1) 脱离了文档流 ​ 2) 在页面中不再占位(浮起来了)，就无法继承父级的宽度(必须自己自定义宽度) ​ 3) 左右同时存在，取左；同理上下，取上 ​ 4) 参照距离当前元素最近的父定位元素，如果所有的父元素都没有定位元素，参照浏览器视口 fixed 定位元素(固定定位)​ position:fixed //生成绝对定位的元素，相对于浏览器窗口进行定位 ​ 1) 脱离了文档流 ​ 2) 参照浏览器视口 sticky 定位元素(粘滞定位)​ 1) 不脱离文档流 ​ 2) relative 和 fixed 的结合 ​ top:50px ​ 当当前元素距离浏览器视口顶端为50px的时候，体现fixed的特点 inherit 定位元素（继承定位）​ position:inherit //规定应该从父元素继承 position 属性的值。 7.3 伸缩盒布局​ 1) 作用：使得子元素在父元素中分列显示，与float的作用类似。一般用于响应式布局（手机app中） ​ 2) 用法 ​ 1. 父元素在主轴上一定要有一个固定的宽/高 ​ 2. 子元素在交叉轴上默认宽/高占满父元素 ​ 如果主轴为x轴，那么子元素的默认高度占满父元素 ​ 如果主轴为y轴，那么子元素的默认宽度占满父元素 ​ 3. 123456789&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;ul &#123; display:flex;&#125; ul 伸缩盒​ 1)设置父元素为伸缩盒 (display) ​ flex ​ 2) 主轴 （flex-direction） ​ 主轴 默认情况下为x轴 ​ row 【左中右】/column【上中下】 ​ 交叉轴 默认情况下为y轴 ​ 元素沿着伸缩盒的主轴排列的 ​ 3) 伸缩盒自动换行（flex-wrap） ​ 子元素宽度和大于父元素的时候是否换行 ​ nowrap 默认值，不换行 ​ wrap 换行 li 伸缩盒的元素​ 1) 基础值 ​ flex-basis 主轴上元素的基础值(宽/高) ​ 2) 对盈余空间的分配 ​ flex-grow ​ flex-wrap: wrap; /空间不够时自动换换行/ ​ flex-wrap: nowrap; /空间不够时不换行，等比例压缩/ ​ 3) 对亏损空间的贡献 ​ flex-shrink: ​ 4) 速写 ​ flex: grow shrink basis; 如何理解响应式布局就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本 方法： 媒体查询 8.滚动条​ overflow ​ hidden:没有滚动条,且内容只有规定区域的内容 ​ visible:默认值没有滚动条,这个属性定义溢出元素内容区的内容会如何处理且显示. ​ scroll:这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条 ​ auto:显示滚动条,且内容只有规定区域的内容.","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://ljx1106234349.github.io/tags/笔记/"},{"name":"练习","slug":"练习","permalink":"https://ljx1106234349.github.io/tags/练习/"}]},{"title":"字体样式/文本样式/列表样式/盒子样式/单位","slug":"样式、单位","date":"2019-08-01T07:57:12.000Z","updated":"2019-08-05T07:43:51.226Z","comments":true,"path":"2019/08/01/样式、单位/","link":"","permalink":"https://ljx1106234349.github.io/2019/08/01/样式、单位/","excerpt":"","text":"笔记1.字体样式(可以被继承) 网络字体 主要用于字体图标库（iconfont/fontawesome） 使用步骤： 在iconfont网站中选择图标，加入项目，产生代码 将产生的代码在html中通过link引用 http://at.alicdn.com/t/font_1328534_f3dyyeuoew.css 应用css中定义好的类，来使用对应的图标 练习12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;网络字体&lt;/title&gt; &lt;!-- 字体图标库 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://at.alicdn.com/t/font_1329731_hp6he9gdlsj.css&quot;&gt;&lt;/head&gt;&lt;style&gt; .iconfont&#123; font-size: 50px; color:blue; &#125;&lt;/style&gt;&lt;body&gt; &lt;i class=&quot;iconfont icon-wifi&quot;&gt;&lt;/i&gt; &lt;span class=&quot;iconfont icon-api&quot;&gt;&lt;/span&gt; &lt;img src=&quot;./image/AdobeAe.png&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;./image/AdobeAi.png&quot; alt=&quot;&quot;&gt; &lt;/body&gt;&lt;/html&gt; 正常字体 1234567891011121314font-family:&quot;微软雅黑&quot;,&quot;Microsoft YaHei&quot;,&quot;宋体&quot;,serif;font-size:12px; //字体大小 浏览器默认字体为16pxfont-weight:bold; //字体：加粗 thin //比继承下来的更细一些 normal bolder //更粗一些 100~900font-style:normal; //字体样式：正常 font-style:italic //是否开启斜体line-height:2em; //行高【文本垂直居中】font:style weight size/line-height family; 例如：italic bold 12px/2em &apos;Microsoft YaHei&apos;,serif 练习1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;字体&lt;/title&gt; &lt;style&gt; /*html &#123; font: normal normal 12px/1.4em &apos;Microsoft YaHei&apos;,&apos;serif&apos;; &#125;*/ div.one &#123; font-family: &quot;黑体1号&quot;,&quot;Microsoft YaHei&quot;； font-size:12px; font-weight: 600;/*字体大小：粗细*/ font-style: italic; /*字体样式：斜体*/ line-height: 3em;/*行高【文本垂直居中】*/ &#125; div.two &#123; font-family: &quot;宋体&quot; &#125; div.three &#123; font-family: &quot;tahoma&quot; &#125; div.four&#123; line-height: 2em; text-align: center;/*文本水平居中*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;one&quot;&gt; CSS 文本属性可定义文本的外观。通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。 &lt;/div&gt; &lt;div class=&quot;two&quot;&gt; CSS 文本属性可定义文本的外观。通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。 &lt;/div&gt; &lt;div class=&quot;three&quot;&gt; CSS 文本属性可定义文本的外观。通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。 &lt;/div&gt; &lt;div class=&quot;four&quot;&gt; 字符间距，对齐文本，装饰文本， &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 2.文本样式（可以被继承）12345678910111213141516171819color:#333 //字体颜色text-align:center //文本水平居中text-decoration-line underline //下划线 //默认 line-through //中间显示 overline //头部显示 none //取消text-decoration-style solid //默认 dotted //圆点型虚线 double //两行线 dashed //方块型虚线 wavy //波浪 ...text-decoration-color //颜色text-decoration:none; //字体装饰text-indent //缩进 例：p &#123;text-indent: 5em;&#125; //字符缩进5个字符text-shadow:12px 2px 3px #ccc; //x轴偏移，y轴偏移，模糊程度，颜色 练习12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;文本样式&lt;/title&gt; &lt;style&gt; a &#123; /*text-decoration-line: overline; text-decoration-style: dotted;//虚线 text-decoration-color: red;*/ text-decoration: none; /*text-decoration: line-through double: pink;*/ &#125; p &#123; text-indent: 2em; text-shadow: 2px 2px 1px rgba(0,0,0,7);/*向右，向下，模糊程度，颜色*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;https://www.w3school.com.cn/css/css_text.asp&quot;&gt;CSS文本教程&lt;/a&gt; &lt;p&gt;CSS 文本属性可定义文本的外观。通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 3.列表样式12345678910list-style-type: //默认样式 圆点 circle //圆圈 square //方块 ...list-style-image: url(&apos;./image/AdobeAi.png&apos;); //把圆点改为图标list-style-position: outside // 默认样式 把圆点放到内容区域 inside //移出内容区域list-style:none; //取消 练习12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;列表&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://at.alicdn.com/t/font_1329731_hp6he9gdlsj.css&quot;&gt; &lt;style&gt; ul &#123; /*list-style-type: circle;*/ /*list-style-image: url(&apos;./image/AdobeAi.png&apos;);*/ /*list-style-position: inside;*/ /*把圆点放到内容区域 outside移出内容区域*/ list-style: none; font-size: 10px; line-height: 2em; color: pink; &#125; ul .iconfont &#123; color: #333; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt; &lt;i class=&quot;iconfont icon-api&quot;&gt;&lt;/i&gt;one &lt;/li&gt; &lt;li&gt; &lt;i class=&quot;iconfont icon-api&quot;&gt;&lt;/i&gt;two &lt;/li&gt; &lt;li&gt; &lt;i class=&quot;iconfont icon-api&quot;&gt;&lt;/i&gt;three &lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; 4.盒子样式（盒子、块元素）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495widthheightmargin //外边距 top right botton left margin:10px; //上有下左 margin:0 10px; //上下为0，左右为10px margin:0 5px 10px; //上0，左右5px，下10px margin:0 5px 10px 15px; //上右下左padding-top padding-right padding-bottom padding-left padding box-shadow: 5px 5px 10px #ccc; box-shadow:inset 0 0 3px lightblue; border //边框 border-top-style 边框线类型 border-top-width 边框宽度 border-top-color 边框线颜色 border-top border-right-style 边框线类型 border-right-width 边框宽度 border-right-color 边框线颜色 border-right border-bottom-style 边框线类型 border-bottom-width 边框宽度 border-bottom-color 边框线颜色 border-bottom border-left-style 边框线类型 border-left-width 边框宽度 border-left-color 边框线颜色 border-left border-color border-style border-width border:1px solid #ededed; 【*】 border-radius 圆角半径 background-origin 背景铺设的起点 border-box 边框下 padding-box 内边距下 content-box 内容下 background-image 背景图片 url background-repeat 背景重复方式 repeat-x repeat-y no-repeat background-color 背景颜色 颜色 background-position 背景位置 center top left 10px 20px background-clip 背景裁切方式 border-box 边框下 padding-box 内边距下 content-box 内容下 background 速写 background:url(&apos;&apos;) no-repeat center; //插入图片 不重复 居中 background-size:cover; //覆盖 =&gt; background:center/cover padding-box url(&apos;&apos;) no-repeat ; 一个盒子的组成： 外边距 margin 边框 border 内边距 padding 内容 存放子元素和内容的区域 盒子所占面积多大？ 盒子存放内容的区域为多大？盒子计算方式 box-sizing:content-box(传统盒子) width = 内容宽 height = 内容高 所占的宽 = border + padding + wedth 所占的高 = border + padding + height box-sizing:border-box;边框盒子（怪异盒子） width = 边框以内所有的和 width = border + padding + 内容宽 练习11234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;盒子模型&lt;/title&gt; &lt;style&gt; .one &#123; box-sizing: content-box;/*内容盒子*/ width: 100px; height: 100px; margin: 10px; border: 10px dotted lightblue; /*边框 虚线 颜色*/ padding: 10px; background-color: pink; &#125; .two &#123; box-sizing: border-box;/*怪异盒子或边框盒子*/ width: 100px; height: 100px; margin: 10px; border: 10px dotted lightblue; /*边框 虚线 颜色*/ padding: 10px; background-color: pink; &#125; .three &#123; width: 100px; height: 100px; border: 1px solid lightblue; border-radius: 50% &#125; .three:hover &#123; box-shadow: 5px 5px 3px pink; /*box-shadow: inset 5px 5px 3px pink; 阴影在圈里面*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;one&quot;&gt; one &lt;/div&gt; &lt;div class=&quot;two&quot;&gt; two &lt;/div&gt; &lt;div class=&quot;three&quot;&gt; three &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 练习212345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;盒子&lt;/title&gt; &lt;style&gt; ul &#123; margin: 0; padding: 0px; list-style: none; width: 940px; background-color: pink; margin: 0 auto; &#125; ul::after &#123; content: &quot;&quot;; clear: both; display: block; &#125; ul &gt; li &#123; box-sizing: border-box; width: 300px; height: 200px; background-color: lightblue; float: left; margin-right: 20px; padding: 50px; &#125; ul &gt; li:last-child &#123; margin-right: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 300*3 + 20*2 = 940 --&gt; &lt;ul&gt; &lt;li&gt;one&lt;/li&gt; &lt;li&gt;two&lt;/li&gt; &lt;li&gt;three&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 练习3123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;背景&lt;/title&gt; &lt;style&gt; .box &#123; border: 10px dotted lightblue; padding: 10px; width: 500px; height: 300px; background-image: url(&apos;./image/6.jpg&apos;); background-repeat: no-repeat; /*取消平铺*/ background-origin: border-box; /*从原点位置开始铺*/ background-size: cover; /*覆盖*/ /*background-size: contain; 包含*/ /*background-color: pink;*/ /*background-origin: content-box; 内容盒子*/ /*background-clip: content-box; 从内容开始裁切*/ background-clip: padding-box; 从内边距开始裁切 /*background-clip: border-box; 从外边距开始裁切*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; helloworld &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.单位1234567891011121314151617181920212223242526272829颜色 #333333 =&gt; #333 #ededed rgb(0,0,0) =&gt;#000000 rgba(0,0,0,0.3) 渐变长度 绝对单位 px 相对单位 em 当前元素上的font-size的值 font-size:12px ; 1em = 12px; 2em = 24px; rem html&#123;font-size:14px&#125; 1rem = 14px; % width 相对于父元素 border-radius 相对于当前元素的width ... 关键 center border-box content-box 函数 url() rgb() rgba()","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://ljx1106234349.github.io/tags/笔记/"},{"name":"练习","slug":"练习","permalink":"https://ljx1106234349.github.io/tags/练习/"}]},{"title":"选择器/代码/脑图","slug":"选择器","date":"2019-07-31T06:08:55.000Z","updated":"2019-08-06T06:46:19.556Z","comments":true,"path":"2019/07/31/选择器/","link":"","permalink":"https://ljx1106234349.github.io/2019/07/31/选择器/","excerpt":"","text":"选择器1.核心选择器12345678910111213标签选择器 div &#123;&#125;id选择器 #one &#123;&#125; //选择id=&quot;one&quot;的所有元素class选择器 .second &#123;&#125; //选择 class=&quot;second&quot;的所有元素逗号选择器 div,#one &#123;&#125;选中所有div元素和所有id=&quot;one&quot;的元素 ul,ol &#123;&#125; //选择ul和ol中的元素组合选择器 div#one &#123;&#125; //选中div中id=&quot;one&quot;的所有元素普通选择器 * //选择所有元素，不单独使用 练习1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;选择器&lt;/title&gt; &lt;table&gt; &lt;style&gt; body,h1,h2,li &#123; margin: 0 /* 元素自身边框到另一个元素边框的距离 */ &#125; div#one &#123; color: pink; &#125; div.second &#123; color: green; &#125; .nav &gt; li.five + * &#123; color: red; &#125; .nav &gt; li.four ~ * &#123; color: yellow; &#125; &lt;/style&gt; &lt;/table&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;tbl&quot;&gt;&lt;/div&gt; &lt;h1&gt;选择器&lt;/h1&gt; &lt;h1&gt;核心选择器&lt;/h1&gt; &lt;ul class=&quot;nav&quot;&gt; &lt;li class=&quot;five&quot;&gt;标签选择器&lt;/li&gt; &lt;li class=&quot;four&quot;&gt;id选择器&lt;/li&gt; &lt;li&gt;class选择器&lt;/li&gt; &lt;li&gt;逗号选择器&lt;/li&gt; &lt;/ul&gt; &lt;div id=&quot;one&quot;&gt;one&lt;/div&gt; &lt;div id=&quot;two&quot; class=&quot;second&quot;&gt;two,second&lt;/div&gt; &lt;div class=&quot;three&quot;&gt;three&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2.层次选择器123456789子元素选择器 .nav &gt; ul &gt; li &#123;&#125; //选择nav中ul中的li后代选择器 .nav li &#123;&#125; //选择nav中li下一个选择器 例：.class &gt; li.one + * &#123;&#125; //表示选择class中li中class=&quot;one&quot;后面的一个元素 例：.class &gt; li.one ~ * &#123;&#125; //表示选择class中li中class=&quot;one&quot;之后的所有元素 3.属性选择器123456selector[] input[placeholder] // input[type=text] // input[type^=t] //选择其 type 属性值以 &quot;t&quot; 开头的每个 &lt;input&gt; 元素 input[type$=t] //选择其 type 属性以 &quot;t&quot; 结尾的所有 &lt;input&gt; 元素 input[type*=t] //选择其 type 属性中包含 &quot;t&quot; 子串的每个 &lt;input&gt; 元素 4.伪类选择器/过滤器123456789101112131415161718与状态相关 :link a标签还未被访问 :hover 光标悬浮到元素上 :action a标签激活 :visited a标签访问过与子元素相关:first-child 例：p:first-child //选择属于父元素的第一个子元素的每个 &lt;p&gt; 元素:last-child 例：p:last-child //选择属于其父元素最后一个子元素每个 &lt;p&gt; 元素:first-of-type 例：p:first-of-type //选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素:last-of-type 例：p:last-of-type //选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素:only-of-type 例：p:only-of-type //选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素:only-child 例：p:only-child //选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素 5.伪元素1234567891011::after //插入在内部的后面::before //插入在内部的前面在内部插入子元素副作用：在dom节点中产生一个新节点了解 :first-letter 例：p:first-letter //选择每个 &lt;p&gt; 元素的首字母 :first-line 例：p:first-line //选择每个 &lt;p&gt; 元素的首行 ::selection //选择被用户选取的元素部分 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;选择器&lt;/title&gt; &lt;style&gt; /*重置*/ body,ul ,p&#123; margin: 0; &#125; ul &#123; padding: 0; list-style: none; &#125; /*导航*/ .nav &#123; background:#333; color: #ededed; &#125; .nav &gt; ul::after &#123; content: &quot;&quot;; /* 添加的元素不具备任何特性 */ display: block; /* 显示 */ clear: both; /* 清理浮动 */ &#125; .nav li &#123; line-height: 2em; &#125; .nav &gt; ul &gt; li &#123; float: left; /* 浮动 */ width: 100px; text-align: center; position: relative; /* position定位.nav &gt; ul &gt;li 元素 */ &#125; .nav &gt; ul &gt; li:hover &#123; background: #ededed; color: #333; &#125; /* 二级导航容器 */ .nav &gt; ul &gt; li &gt; ul &#123; display: none; /* 隐藏块元素 */ position: absolute; background: #ededed; color: #333; width: 100%; &#125; .nav &gt; ul &gt; li:hover &gt; ul &#123; display: block; &#125; .nav &gt; ul &gt; li &gt; ul &gt; li:hover &#123; background: #333; color: #ededed; &#125; .test1 &#123; width: 100px; height: 200px; background-color: #ee1370; &#125; .test2 &#123; width: 200px; height: 200px; background-color: #247fdd; position: absolute; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;nav&quot;&gt; &lt;ul&gt; &lt;!-- 一级导航 --&gt; &lt;li&gt; &lt;p&gt;one&lt;/p&gt; &lt;ul&gt; &lt;!-- 二级导航 --&gt; &lt;li&gt;btn1&lt;/li&gt; &lt;li&gt;btn2&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;two&lt;/p&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;three&lt;/p&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- 导航结束 --&gt; &lt;div class=&quot;content&quot;&gt; &lt;/div&gt; &lt;!-- 内容结束 --&gt; &lt;!-- 脚部开始 --&gt; &lt;div class=&quot;footer&quot;&gt; &lt;/div&gt; &lt;!-- 脚部结束 --&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;盒子&lt;/title&gt; &lt;style&gt; .box1, .box2 &#123; float: left; /* 浮动 */ display: none; /* 隐藏 */ &#125; .box1 &#123; width: 100px; height: 100px; background: #c7094c; &#125; .box2 &#123; width: 100px; height: 100px; background: #98c709; position: absolute; &#125; .top1:hover + .top2 + .box1 &#123; display: block /* 显示 */ &#125; .top2:hover + .box1 + .box2 &#123; display: block /* 显示 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;top1&quot;&gt; BOX1 &lt;/div&gt; &lt;div class=&quot;top2&quot;&gt; BOX2 &lt;/div&gt; &lt;div class=&quot;box1&quot;&gt;BOX1&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;BOX2&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://ljx1106234349.github.io/tags/笔记/"},{"name":"代码","slug":"代码","permalink":"https://ljx1106234349.github.io/tags/代码/"}]},{"title":"博客搭建笔记","slug":"博客笔记","date":"2019-07-31T02:18:26.000Z","updated":"2019-08-02T05:32:59.902Z","comments":true,"path":"2019/07/31/博客笔记/","link":"","permalink":"https://ljx1106234349.github.io/2019/07/31/博客笔记/","excerpt":"","text":"步骤安装node.js安装Git12例：git config --global user.name &quot;1106234349@qq.com&quot; git config --global user.email &quot;1106234349@qq.com&quot; 安装typora123打开命令行执行npm install -g hexo-cli阿里NPM镜像：npm install -g cnpm --registry=https://registry.npm.taobao.org 建立单独文件夹MyBlog 执行hexo init123执行hexo serve访问网址http://localhost:4000 完成搭建 新建事件 执行hexo n 文件名用Typora打开文件进行编辑 保存 部署123执行hexo g--watch执行hexo d 成品博客域名：https://liujunxiang.vip","categories":[],"tags":[{"name":"博客搭建步骤总结","slug":"博客搭建步骤总结","permalink":"https://ljx1106234349.github.io/tags/博客搭建步骤总结/"}]},{"title":"元素/CSS/CSS三大样式/CSS常用属性","slug":"元素、CSS","date":"2019-07-30T06:49:18.000Z","updated":"2019-09-30T06:33:20.219Z","comments":true,"path":"2019/07/30/元素、CSS/","link":"","permalink":"https://ljx1106234349.github.io/2019/07/30/元素、CSS/","excerpt":"","text":"课堂笔记 元素/CSS1.块元素 （box） 作用：作为页面框架，或者容器。是页面的主体特性： 独占一行空间 默认宽度为100%，默认高度由子元素或者内容决定 可以为其指定宽高 style=&quot;width:;height:;&quot; div 无意义的块元素（无招） 123456789101112131415161718192021222324252627282930313233 h1~h3 标题​ font-size​ font-weight​ margin​ p 段落​ margin​ html​ body​ margin​ ul、li 无序列表，列表项 ​ ul​ margin​ padding​ list-style​ li​ ol、li 有序列表，列表项​ ol​ margin​ padding​ list-style​ dl、dt、dd 有序列表​ dl​ margin​ dd​ marginH5新增的块元素（语义化标签） header(头) nav article（主体） section (部分) footer（脚） aside ##### 块级元素的显示与隐藏，写出两种方法，并说明区别 ​ **display:none/block** 元素隐藏之后，不占用原来的位置 ​ **visibility:hidden/visible** 元素隐藏之后，占用原来的位置2.行内元素(label)123456789101112131415161718192021222324252627282930313233343536373839404142434445作用：点缀网页，填充内容特性： 1) 与其他行内元素共享一行空间 2) 默认宽高由内容决定 3) 不能为其指定宽和高 4) 行内元素中不可以嵌套块元素，但块元素中可以嵌套行内元素span 无意义的行内元素 a 超级链接（axure open link） 默认样式 color text-decoration cursor 默认事件（js - dom） 点击事件 href url 相对路径 绝对路径 mailto 锚点 ... target _self _blank img src 图片地址 url 相对路径 绝对路径 base64格式的数据 alt 图片找不到的时候文本替换 图片地图 &lt;img src=&quot;&quot; alt=&quot;&quot;&gt; &lt;map&gt; canvas strong bold b em i sub sup del ... 块级元素与行内元素的特性，并举例哪些是块级元素与行内元素块级元素：div、h1~h3、p、ul、html、body 1) 独占一行空间 2) 默认宽度为100%，默认高度由子元素或者内容决定 3) 可以为其指定宽高 style=”width:;height:;” 行内元素：a、span、img 1) 与其他行内元素共享一行空间 2) 默认宽高由内容决定 3) 不能为其指定宽和高 4) 行内元素中不可以嵌套块元素，但块元素中可以嵌套行内元素 3.功能元素 （行内元素）1234567891011121314151617181920211) 表格 table【属性】border、width、、、、 caption thead tbody tr td/th【属性】colspan、rowspan、width、align td/th中可以放任意子元素 tfoot2) 表单用户 -&gt; 表单 -&gt; 后台 -&gt; 数据库注册页面登录页面搜索框 &lt;form action=&quot;&quot;&gt; input select textarea &lt;/form&gt; form ​ action 后台接口地址 ​ method 请求方式 get ​ 参数拼接在url后面，通过?来分割 ​ 传递参数较少​ 查询学生信息、通过id删除学生信息、 post ​ 参数存放在请求体中，安全 ​ 传递参数更多 ​ 保存或者更新学生信息、批量删除 enctype 编码方式 enctype=’application/x-www-form-urlencoded’ 浏览器就会将参数转换为【查询字符串 qs】username=zhangsan&amp;password=123321&amp;nickname=张三&amp;email=1106234349@qq.com multipart/form-data 当有附件在表单中的时候，enctype务必设置成这种格式 ajax 查询字符串​ 123username=zhangsan&amp;password=123321&amp;nickname=张三&amp;email1106234349@qq.com&apos;&#123;&quot;username&quot;:&quot;charles&quot;,&quot;password&quot;:&quot;123321&quot;&#125;&apos;input 12345678910111213141516name: 不能省略，作为参数中的keyvalue: 作为参数中的value,在按钮中务必指定value值type:text 单行文本框password 密码框submit 提交按钮file 附件选择器radio 单选按钮checkbox 复选按钮h5拓展(兼容性，功能)emaildatenumber...progress checked: 单值属性 默认选址placeholder 提示语selectoption 标签中的文本显示在网页中，提交的值应该是option的value值，当这个值没有设定的时候，提交的是标签中的文本 12&lt;option value=&quot;sx&quot;&gt;山西&lt;/option&gt; sx&lt;option&gt;山西&lt;/option&gt; 山西 textarea多行文本域placeholder 提示语 css1.介绍123456层叠样式表​层叠多个样式表修饰同一个元素​继承​优先级 ​样式表 123&#123; color:#fff;&#125; 2.在html中如何应用css1）在元素中添加style属性，style属性值为css样式规则 1&lt;div style=&quot;width:100px;height;100px;&quot;&gt;&lt;/div&gt; ​ 缺点：样式与结构复杂 ​ 优点：简单直接，优先级高 2）将样式添加到head标签中的style标签里 3.CSS的三种样式：内联式、嵌入式、外部式以及他们的优先级1.内联式​ css样式表就是把css代码直接写在现有的HTML标签中，如下面代码： 1&lt;p style=\"color:red\";font-size:12px&gt;这里文字是红色。&lt;/p&gt; 2.嵌入式​ 嵌入式css样式，就是可以把css样式代码写在XXX标签之间 1234567&lt;head&gt; &lt;style type=\"text/css\"&gt; span&#123; color:red; &#125; &lt;/style&gt; &lt;/head 3.外部式123456789101112131415161718 外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中， 这个css样式文件以“.css”为扩展名，在&lt;head&gt;内（不是在&lt;style&gt;标签内） 使用&lt;link&gt;标签将css样式文件链接到HTML文件内，如下面代码：&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;注意：1、css样式文件名称以有意义的英文字母命名，如 main.css。2、rel=&quot;stylesheet&quot; type=&quot;text/css&quot;是固定写法不可修改。3、&lt;link&gt;标签位置一般写在&lt;head&gt;标签之内。 这三种样式是有优先级的，记住他们的优先级：内联式 &gt; 嵌入式 &gt; 外部式， 但是嵌入式&gt;外部式有一个前提：嵌入式css样式的位置一定在外部式的后面。其实总结来说，就是--就近原则（离被设置元素越近优先级别越高）。 但注意上面所总结的优先级是有一个前提：内联式、嵌入式、外部式样式表中css样式是在的相同权值的情况下 4.语法选择器 {样式名:样式值;样式:样式值;…} 5.CSS常用属性文字超出省略： 12345overflow: hidden;text-overflow: ellipsis;white-space: nowap; 前提要设置固定的宽度 多行文字省略（指在webkit内核下生效） 123456789overflow: hidden;text-overflow: ellipsis;display: -webkit-box;-webkit-line-clamp: 2;-webkit-box-orient: vertical; flex布局——垂直水平居中 123display: flex;justify-content: center;align-items: center; flex布局——控件自适应平分 123456父组件： display:flex;子组件： flex-grow: 1; // 水平平分 flex-flow: 1； // 垂直平分 flex-direction: column; // 通过调整主轴的对齐方式 文字对齐方式 1vertical-align: middle; // 调整文字与内容对齐方式 设置padding会导致控件溢出或变大（部分情况下） 1box-sizing: border-box; // 改变盒子类型 将内填充也算作盒子的大小 css3发光字体 1属性：text-shadow: 0 0 40px #136991; 文字渐变色 123background-image: linear-gradient(to bottom, #d49e34, #fff17d);color: transparent;-webkit-background-clip: text; 修改input、textarea元素中的placeholder属性样式 1234input::-webkit-input-placeholder&#123;&#125; /* 使用webkit内核的浏览器 */input:-moz-placeholder&#123;&#125; /* Firefox版本4-18 */input::-moz-placeholder&#123;&#125; /* Firefox版本19+ */input:-ms-input-placeholder&#123;&#125; /* IE浏览器 */ 6.css的引入方式有哪些​ 外部导入(link标签)​ style标签​ 标签内部添加style属性 程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;form&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"https://liujunxiang.vip\" method=\"get\" &gt; &lt;table&gt; &lt;tbody&gt; &lt;!-- 用户名 --&gt; &lt;tr&gt; &lt;td&gt;用户名&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" name=\"username\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- 密码 --&gt; &lt;tr&gt; &lt;td&gt;密码&lt;/td&gt; &lt;td&gt;&lt;input type=\"password\" name=\"password\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- 真实姓名 --&gt; &lt;tr&gt; &lt;td&gt;真实姓名&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" name=\"nickname\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- 邮箱 --&gt; &lt;tr&gt; &lt;td&gt;email&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" name=\"email\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!-- 出生日期 --&gt; &lt;tr&gt; &lt;td&gt;出生日期&lt;/td&gt; &lt;td&gt;&lt;input type=\"data\" name=\"birth\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;lable for=\"gender_male\"&gt; &lt;input id=\"gender_male\"t type=\"radio\" name=\"gender\" value=\"male\"&gt;男 &lt;/lable&gt; &lt;lable&gt; &lt;input id=\"gender_female\" type=\"radio\" name=\"gender\" value=\"female\" checked&gt;女 &lt;/lable&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;爱好&lt;/td&gt; &lt;td&gt; &lt;label&gt; &lt;input type=\"checkbox\" name=\"hobby\" value=\"basketball\"&gt; &lt;/label&gt;篮球 &lt;label&gt; &lt;input type=\"checkbox\" name=\"hobby\" value=\"football\"&gt; &lt;/label&gt;足球 &lt;label&gt; &lt;input type=\"checkbox\" name=\"hobby\" value=\"reading\"&gt; &lt;/label&gt;阅读 &lt;/td&gt; &lt;/tr&gt; &lt;!-- 地址 --&gt; &lt;tr&gt; &lt;td&gt;地址&lt;/td&gt; &lt;td&gt; &lt;select name=\"privince\"&gt; &lt;option value=\"hn\"&gt;湖南&lt;/option&gt; &lt;option value=\"hb\"&gt;湖北&lt;/option&gt; &lt;option value=\"js\"&gt;江苏&lt;/option&gt; &lt;option value=\"sx\"&gt;陕西&lt;/option&gt; &lt;/select&gt;省份 &lt;select name=\"city\"&gt; &lt;option value=\"cs\"&gt;长沙&lt;/option&gt; &lt;option value=\"wh\"&gt;武汉&lt;/option&gt; &lt;option value=\"sz\"&gt;苏州&lt;/option&gt; &lt;option value=\"xa\"&gt;西安&lt;/option&gt; &lt;/select&gt;城市 区/县&lt;input type=\"text\" name=\"address\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;介绍&lt;/td&gt; &lt;td&gt; &lt;textarea placeholder=\"请编写个人介绍\" name=\"description\" cols=\"30\" rows=\"10\"&gt; &lt;/textarea&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" value=\"注册\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 运行截图 百度脑图","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://ljx1106234349.github.io/tags/笔记/"},{"name":"代码","slug":"代码","permalink":"https://ljx1106234349.github.io/tags/代码/"},{"name":"脑图","slug":"脑图","permalink":"https://ljx1106234349.github.io/tags/脑图/"}]},{"title":"HTML/元素/属性/结构","slug":"HTML、元素、属性、结构","date":"2019-07-29T01:57:50.000Z","updated":"2019-08-09T07:38:42.358Z","comments":true,"path":"2019/07/29/HTML、元素、属性、结构/","link":"","permalink":"https://ljx1106234349.github.io/2019/07/29/HTML、元素、属性、结构/","excerpt":"","text":"课堂笔记HTML ​ 文本 （纯字符） ​ 超级文本标记语言 ​ 字符，图片，超链接，视频，音频 载体 - 文档 1234&lt;h1&gt;hello world&lt;/h1&gt; &lt;p&gt;段落&lt;/p&gt; &lt;video src=&quot;a.mp4&quot;&gt;&lt;/video&gt; &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;/a&gt; B/S架构​ b浏览器 ​ s服务器 网络概念​ Http 超文本传输协议 ​ url 统一资源定位符 ​ uri 统一资源标识符 html网页1) 开发流程​ 1.1 编写网页 （sublime/vscode） ​ 1.2 本地测试 ​ 1.3 部署（linux） ​ 将本地的html网页上传至云服务器上，并且部署到apache静态服务器上 ​ 1.4 网络测试 ​ 2) 网页元素 元素​ 开始标签，子元素，结束标签 1234&lt;div id=&apos;one&apos;&gt;hello world&lt;/div&gt;&lt;div&gt; &lt;span&gt;hello world&lt;/span&gt;&lt;/div&gt; 属性​ 在开始标签中可以添加属性 1&lt;div 属性名=属性值 属性名=属性值&gt;程序员 ​ 属性名不区分大小写 12&lt;div id=&quot;one&quot;&gt;&lt;/div&gt;&lt;div ID=&quot;one&quot;&gt;&lt;/div&gt; 核心属性（绝大多数标签都可以应用的属性）​ id 文档内部的唯一标识 ​ class 类 123&lt;div class=&quot;first one&quot;&gt;one&lt;/div&gt;&lt;div class=&quot;first two&quot;&gt;two&lt;/div&gt;&lt;div class=&quot;first three&quot;&gt;three&lt;/div&gt; ​ title 描述 ​ style 样式，取值为css规则 ​ css规则,键值对，键值之间通过冒号分割，规则之间通过分号分割 1&lt;div id=&apos;one&apos; style=&quot;color:#333;backgroud:#ededed&quot;&gt;&lt;/div&gt; 特有属性​ a(href 、 target) ​ img(alt、src) h5拓展属性 (data-xxx)1&lt;div data-nn=&apos;one&apos;&gt;&lt;/div&gt; 结构doctype 声明部分 html head 不会显示到浏览器视口中 title 显示在浏览器选项卡 meta 用于设置元信息,配置 charset=utf-8 gbk big5 报社 环球新闻导报（php） utf-8 nihao 汉语拼音 hello 函数 编码 编辑器 UTF-8 解码 浏览器 body 网页主体 表单元素的三个布尔属性disabled、checked与selected。 布尔属性是控制元素的某一个状态，是一种比较特别的属性。由于浏览器商之前互相没协商好，因此在定义布尔属性时，也有差异。 布尔属性主要出现在表单元素上，常见的有radio,checkbox上的checked属性，option元素的selected属性以及所有 表单元素都支持的disabled属性 day06作业HTML5——百度脑图课表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;我的课表&lt;/title&gt; &lt;style&gt; .tbl &#123; width: 50%; border-collapse: collapse; &#125; .tbl td &#123; border: 1px solid #333 &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table class=&quot;tbl&quot;&gt; &lt;!--&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt; cellspacing表示盒子与边框距离为零，不代表线重合--&gt; &lt;caption&gt;&lt;b&gt;我的课表&lt;/b&gt;&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt; &lt;td&gt;星期一&lt;/td&gt; &lt;td&gt;星期二&lt;/td&gt; &lt;td&gt;星期三&lt;/td&gt; &lt;td&gt;星期四&lt;/td&gt; &lt;td&gt;星期五&lt;/td&gt; &lt;td&gt;星期六&lt;/td&gt; &lt;td&gt;星期日&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;上午&lt;/td&gt; &lt;td&gt;9:00-10:30&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;11:00-11:30&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;9&quot; align=&quot;center&quot;&gt;中午（11:30-14:00）&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;下午&lt;/td&gt; &lt;td&gt;14:00-16:30&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;17:00-17:30&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;9&quot; align=&quot;center&quot;&gt;休息&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;晚上&lt;/td&gt; &lt;td&gt;19:30-21:00&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 个人简历1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;个人简历&lt;/title&gt; &lt;style&gt; .tbl &#123; width: 600px; border-collapse: collapse; &#125; .tbl td &#123; border: 1px solid #333; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table class=&quot;tbl&quot;&gt; &lt;caption colspan=&quot;4&quot; align=&quot;center&quot;&gt;我的简历&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot; align=&quot;left&quot;&gt;基本信息&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;80px&quot;&gt;姓名&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt; &lt;td width=&quot;100px&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;毕业院校&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt; &lt;td width=&quot;200px&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot;&gt;性别&lt;/td&gt; &lt;td width=&quot;200px&quot;&gt;&lt;/td&gt; &lt;td colspan=&quot;1&quot;&gt;生日&lt;/td&gt; &lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;学历&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;专业&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;外语水平&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;联系方式&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;籍贯&lt;/td&gt; &lt;td colspan=&quot;3&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot;&gt;职业技能&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot; height=&quot;100px&quot; valign=&quot;top&quot;&gt; 1.&lt;br/&gt;2.&lt;br/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot; &gt;项目经验&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt;智慧校园选课系统&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;2019年1月~2016年6月&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot; height=&quot;50px&quot; valign=&quot;top&quot;&gt;项目描述：&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;预览地址&lt;/td&gt; &lt;td colspan=&quot;3&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Github&lt;/td&gt; &lt;td colspan=&quot;3&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://ljx1106234349.github.io/tags/笔记/"},{"name":"代码","slug":"代码","permalink":"https://ljx1106234349.github.io/tags/代码/"}]}]}